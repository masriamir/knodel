"""Command line interface for transpiling sessions."""

from __future__ import annotations

import argparse
from pathlib import Path

from .transpiler import TidalTranspiler, TranspilerConfig, load_session


def build_parser() -> argparse.ArgumentParser:
    """Create the argument parser for the CLI."""

    parser = argparse.ArgumentParser(
        description="Transpile Python defined sessions into Tidal code.",
    )
    parser.add_argument(
        "session",
        help=("Import path to a function returning a TidalSession (module:function)."),
    )
    parser.add_argument(
        "--output",
        type=Path,
        default=Path("session.tidal"),
        help="Destination file for the generated code.",
    )
    parser.add_argument(
        "--header",
        default="-- Generated by py-tidal",
        help="Header comment to place at the top of the file.",
    )
    return parser


def main() -> None:
    """Entry point used by ``python -m py_tidal``."""

    parser = build_parser()
    args = parser.parse_args()
    transpiler = TidalTranspiler(TranspilerConfig(header=args.header))
    session = load_session(args.session)
    transpiler.write(session, args.output)


if __name__ == "__main__":  # pragma: no cover - CLI shim
    main()
