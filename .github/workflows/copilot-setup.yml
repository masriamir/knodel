name: Copilot Environment Setup

on:
  workflow_dispatch:
  push:
    branches: [ "copilot/**" ]
  pull_request:
    branches: [ main, develop ]

jobs:
  copilot-setup:
    runs-on: ubuntu-latest
    name: Setup environment for Copilot coding agent
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Fetch all history for all tags (required for hatch-vcs)
        fetch-depth: 0
      
    - name: Read Python version
      id: python-version
      run: |
        if [ -f .python-version ]; then
          echo "version=$(cat .python-version)" >> $GITHUB_OUTPUT
        else
          echo "version=3.13" >> $GITHUB_OUTPUT
        fi
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ steps.python-version.outputs.version }}
        
    - name: Install uv (from GitHub to bypass DNS blocks)
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: |
          pyproject.toml
          uv.lock
        
    - name: Create fallback environment setup
      run: |
        # Create a fallback script for environment setup when DNS blocks occur
        cat > setup_fallback.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "Setting up fallback environment for Copilot..."
        
        # Try uv first, fallback to pip if needed
        if command -v uv &> /dev/null; then
          echo "Using uv for dependency management"
          # Try with safety registry first (as per coding guidelines)
          if ! uv sync --default-index https://pkgs.safetycli.com/repository/akm-circuits-llc/pypi/simple/ --all-groups; then
            echo "Safety registry sync failed, trying with PyPI fallback..."
            UV_INDEX_URL=https://pypi.org/simple/ uv sync --all-groups
          fi
        else
          echo "uv not available, using pip fallback"
          # Fallback to pip installation
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            # Install basic dependencies from pyproject.toml
            pip install ruff pytest
          fi
        fi
        
        echo "Environment setup completed"
        EOF
        
        chmod +x setup_fallback.sh
        
    - name: Install dependencies with fallback
      run: |
        ./setup_fallback.sh
        
    - name: Verify environment
      run: |
        echo "Verifying Copilot environment setup..."
        
        # Test basic imports
        if command -v uv &> /dev/null; then
          echo "Testing with uv..."
          uv run python -c "import sys; print(f'Python {sys.version}')"
          uv run python -c "import knodel; print('✅ knodel import successful')"
          
          echo "Running basic tests..."
          uv run pytest --tb=short
          
          echo "Running linting checks..."
          uv run ruff check . || echo "⚠️ Linting issues found"
          uv run ruff format --check . || echo "⚠️ Formatting issues found"
        else
          echo "Testing with pip environment..."
          python -c "import sys; print(f'Python {sys.version}')"
          PYTHONPATH=src python -c "import knodel; print('✅ knodel import successful')"
        fi
        
        echo "✅ Copilot environment verification completed"
        
    - name: Create environment summary
      run: |
        echo "## Copilot Environment Setup Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Environment Details" >> $GITHUB_STEP_SUMMARY
        echo "- Python Version: $(python --version)" >> $GITHUB_STEP_SUMMARY
        echo "- uv Available: $(command -v uv &> /dev/null && echo 'Yes' || echo 'No')" >> $GITHUB_STEP_SUMMARY
        echo "- Working Directory: $(pwd)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Dependencies Status" >> $GITHUB_STEP_SUMMARY
        if command -v uv &> /dev/null; then
          echo "- Package Manager: uv" >> $GITHUB_STEP_SUMMARY
          echo "- Dependencies: $(uv tree 2>/dev/null | wc -l || echo 'N/A') packages" >> $GITHUB_STEP_SUMMARY
        else
          echo "- Package Manager: pip (fallback)" >> $GITHUB_STEP_SUMMARY
          echo "- Dependencies: Minimal setup" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Setup Status" >> $GITHUB_STEP_SUMMARY
        echo "✅ Environment ready for Copilot coding agent" >> $GITHUB_STEP_SUMMARY